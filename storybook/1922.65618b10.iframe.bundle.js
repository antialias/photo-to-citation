"use strict";(self.webpackChunkapp_scaffold=self.webpackChunkapp_scaffold||[]).push([[1922],{"./node_modules/.pnpm/@tanstack+react-query@5.81.5_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useQuery.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>useQuery});var focusManager=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/focusManager.js"),notifyManager=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/notifyManager.js"),modern_query=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/query.js"),subscribable=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/subscribable.js"),thenable=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/thenable.js"),utils=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/utils.js"),QueryObserver=class extends subscribable.Q{constructor(client,options){super(),this.options=options,this.#client=client,this.#selectError=null,this.#currentThenable=(0,thenable.T)(),this.options.experimental_prefetchInRender||this.#currentThenable.reject(new Error("experimental_prefetchInRender feature flag is not enabled")),this.bindMethods(),this.setOptions(options)}#client;#currentQuery=void 0;#currentQueryInitialState=void 0;#currentResult=void 0;#currentResultState;#currentResultOptions;#currentThenable;#selectError;#selectFn;#selectResult;#lastQueryWithDefinedData;#staleTimeoutId;#refetchIntervalId;#currentRefetchInterval;#trackedProps=new Set;bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){1===this.listeners.size&&(this.#currentQuery.addObserver(this),shouldFetchOnMount(this.#currentQuery,this.options)?this.#executeFetch():this.updateResult(),this.#updateTimers())}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return shouldFetchOn(this.#currentQuery,this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return shouldFetchOn(this.#currentQuery,this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,this.#clearStaleTimeout(),this.#clearRefetchInterval(),this.#currentQuery.removeObserver(this)}setOptions(options){const prevOptions=this.options,prevQuery=this.#currentQuery;if(this.options=this.#client.defaultQueryOptions(options),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled&&"function"!=typeof this.options.enabled&&"boolean"!=typeof(0,utils.Eh)(this.options.enabled,this.#currentQuery))throw new Error("Expected enabled to be a boolean or a callback that returns a boolean");this.#updateQuery(),this.#currentQuery.setOptions(this.options),prevOptions._defaulted&&!(0,utils.f8)(this.options,prevOptions)&&this.#client.getQueryCache().notify({type:"observerOptionsUpdated",query:this.#currentQuery,observer:this});const mounted=this.hasListeners();mounted&&shouldFetchOptionally(this.#currentQuery,prevQuery,this.options,prevOptions)&&this.#executeFetch(),this.updateResult(),!mounted||this.#currentQuery===prevQuery&&(0,utils.Eh)(this.options.enabled,this.#currentQuery)===(0,utils.Eh)(prevOptions.enabled,this.#currentQuery)&&(0,utils.d2)(this.options.staleTime,this.#currentQuery)===(0,utils.d2)(prevOptions.staleTime,this.#currentQuery)||this.#updateStaleTimeout();const nextRefetchInterval=this.#computeRefetchInterval();!mounted||this.#currentQuery===prevQuery&&(0,utils.Eh)(this.options.enabled,this.#currentQuery)===(0,utils.Eh)(prevOptions.enabled,this.#currentQuery)&&nextRefetchInterval===this.#currentRefetchInterval||this.#updateRefetchInterval(nextRefetchInterval)}getOptimisticResult(options){const query=this.#client.getQueryCache().build(this.#client,options),result=this.createResult(query,options);return function shouldAssignObserverCurrentProperties(observer,optimisticResult){if(!(0,utils.f8)(observer.getCurrentResult(),optimisticResult))return!0;return!1}(this,result)&&(this.#currentResult=result,this.#currentResultOptions=this.options,this.#currentResultState=this.#currentQuery.state),result}getCurrentResult(){return this.#currentResult}trackResult(result,onPropTracked){return new Proxy(result,{get:(target,key)=>(this.trackProp(key),onPropTracked?.(key),Reflect.get(target,key))})}trackProp(key){this.#trackedProps.add(key)}getCurrentQuery(){return this.#currentQuery}refetch({...options}={}){return this.fetch({...options})}fetchOptimistic(options){const defaultedOptions=this.#client.defaultQueryOptions(options),query=this.#client.getQueryCache().build(this.#client,defaultedOptions);return query.fetch().then(()=>this.createResult(query,defaultedOptions))}fetch(fetchOptions){return this.#executeFetch({...fetchOptions,cancelRefetch:fetchOptions.cancelRefetch??!0}).then(()=>(this.updateResult(),this.#currentResult))}#executeFetch(fetchOptions){this.#updateQuery();let promise=this.#currentQuery.fetch(this.options,fetchOptions);return fetchOptions?.throwOnError||(promise=promise.catch(utils.lQ)),promise}#updateStaleTimeout(){this.#clearStaleTimeout();const staleTime=(0,utils.d2)(this.options.staleTime,this.#currentQuery);if(utils.S$||this.#currentResult.isStale||!(0,utils.gn)(staleTime))return;const timeout=(0,utils.j3)(this.#currentResult.dataUpdatedAt,staleTime)+1;this.#staleTimeoutId=setTimeout(()=>{this.#currentResult.isStale||this.updateResult()},timeout)}#computeRefetchInterval(){return("function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.#currentQuery):this.options.refetchInterval)??!1}#updateRefetchInterval(nextInterval){this.#clearRefetchInterval(),this.#currentRefetchInterval=nextInterval,!utils.S$&&!1!==(0,utils.Eh)(this.options.enabled,this.#currentQuery)&&(0,utils.gn)(this.#currentRefetchInterval)&&0!==this.#currentRefetchInterval&&(this.#refetchIntervalId=setInterval(()=>{(this.options.refetchIntervalInBackground||focusManager.m.isFocused())&&this.#executeFetch()},this.#currentRefetchInterval))}#updateTimers(){this.#updateStaleTimeout(),this.#updateRefetchInterval(this.#computeRefetchInterval())}#clearStaleTimeout(){this.#staleTimeoutId&&(clearTimeout(this.#staleTimeoutId),this.#staleTimeoutId=void 0)}#clearRefetchInterval(){this.#refetchIntervalId&&(clearInterval(this.#refetchIntervalId),this.#refetchIntervalId=void 0)}createResult(query,options){const prevQuery=this.#currentQuery,prevOptions=this.options,prevResult=this.#currentResult,prevResultState=this.#currentResultState,prevResultOptions=this.#currentResultOptions,queryInitialState=query!==prevQuery?query.state:this.#currentQueryInitialState,{state}=query;let data,newState={...state},isPlaceholderData=!1;if(options._optimisticResults){const mounted=this.hasListeners(),fetchOnMount=!mounted&&shouldFetchOnMount(query,options),fetchOptionally=mounted&&shouldFetchOptionally(query,prevQuery,options,prevOptions);(fetchOnMount||fetchOptionally)&&(newState={...newState,...(0,modern_query.k)(state.data,query.options)}),"isRestoring"===options._optimisticResults&&(newState.fetchStatus="idle")}let{error,errorUpdatedAt,status}=newState;data=newState.data;let skipSelect=!1;if(void 0!==options.placeholderData&&void 0===data&&"pending"===status){let placeholderData;prevResult?.isPlaceholderData&&options.placeholderData===prevResultOptions?.placeholderData?(placeholderData=prevResult.data,skipSelect=!0):placeholderData="function"==typeof options.placeholderData?options.placeholderData(this.#lastQueryWithDefinedData?.state.data,this.#lastQueryWithDefinedData):options.placeholderData,void 0!==placeholderData&&(status="success",data=(0,utils.pl)(prevResult?.data,placeholderData,options),isPlaceholderData=!0)}if(options.select&&void 0!==data&&!skipSelect)if(prevResult&&data===prevResultState?.data&&options.select===this.#selectFn)data=this.#selectResult;else try{this.#selectFn=options.select,data=options.select(data),data=(0,utils.pl)(prevResult?.data,data,options),this.#selectResult=data,this.#selectError=null}catch(selectError){this.#selectError=selectError}this.#selectError&&(error=this.#selectError,data=this.#selectResult,errorUpdatedAt=Date.now(),status="error");const isFetching="fetching"===newState.fetchStatus,isPending="pending"===status,isError="error"===status,isLoading=isPending&&isFetching,hasData=void 0!==data,nextResult={status,fetchStatus:newState.fetchStatus,isPending,isSuccess:"success"===status,isError,isInitialLoading:isLoading,isLoading,data,dataUpdatedAt:newState.dataUpdatedAt,error,errorUpdatedAt,failureCount:newState.fetchFailureCount,failureReason:newState.fetchFailureReason,errorUpdateCount:newState.errorUpdateCount,isFetched:newState.dataUpdateCount>0||newState.errorUpdateCount>0,isFetchedAfterMount:newState.dataUpdateCount>queryInitialState.dataUpdateCount||newState.errorUpdateCount>queryInitialState.errorUpdateCount,isFetching,isRefetching:isFetching&&!isPending,isLoadingError:isError&&!hasData,isPaused:"paused"===newState.fetchStatus,isPlaceholderData,isRefetchError:isError&&hasData,isStale:isStale(query,options),refetch:this.refetch,promise:this.#currentThenable};if(this.options.experimental_prefetchInRender){const finalizeThenableIfPossible=thenable=>{"error"===nextResult.status?thenable.reject(nextResult.error):void 0!==nextResult.data&&thenable.resolve(nextResult.data)},recreateThenable=()=>{const pending=this.#currentThenable=nextResult.promise=(0,thenable.T)();finalizeThenableIfPossible(pending)},prevThenable=this.#currentThenable;switch(prevThenable.status){case"pending":query.queryHash===prevQuery.queryHash&&finalizeThenableIfPossible(prevThenable);break;case"fulfilled":"error"!==nextResult.status&&nextResult.data===prevThenable.value||recreateThenable();break;case"rejected":"error"===nextResult.status&&nextResult.error===prevThenable.reason||recreateThenable()}}return nextResult}updateResult(){const prevResult=this.#currentResult,nextResult=this.createResult(this.#currentQuery,this.options);if(this.#currentResultState=this.#currentQuery.state,this.#currentResultOptions=this.options,void 0!==this.#currentResultState.data&&(this.#lastQueryWithDefinedData=this.#currentQuery),(0,utils.f8)(nextResult,prevResult))return;this.#currentResult=nextResult;this.#notify({listeners:(()=>{if(!prevResult)return!0;const{notifyOnChangeProps}=this.options,notifyOnChangePropsValue="function"==typeof notifyOnChangeProps?notifyOnChangeProps():notifyOnChangeProps;if("all"===notifyOnChangePropsValue||!notifyOnChangePropsValue&&!this.#trackedProps.size)return!0;const includedProps=new Set(notifyOnChangePropsValue??this.#trackedProps);return this.options.throwOnError&&includedProps.add("error"),Object.keys(this.#currentResult).some(key=>{const typedKey=key;return this.#currentResult[typedKey]!==prevResult[typedKey]&&includedProps.has(typedKey)})})()})}#updateQuery(){const query=this.#client.getQueryCache().build(this.#client,this.options);if(query===this.#currentQuery)return;const prevQuery=this.#currentQuery;this.#currentQuery=query,this.#currentQueryInitialState=query.state,this.hasListeners()&&(prevQuery?.removeObserver(this),query.addObserver(this))}onQueryUpdate(){this.updateResult(),this.hasListeners()&&this.#updateTimers()}#notify(notifyOptions){notifyManager.jG.batch(()=>{notifyOptions.listeners&&this.listeners.forEach(listener=>{listener(this.#currentResult)}),this.#client.getQueryCache().notify({query:this.#currentQuery,type:"observerResultsUpdated"})})}};function shouldFetchOnMount(query,options){return function shouldLoadOnMount(query,options){return!1!==(0,utils.Eh)(options.enabled,query)&&void 0===query.state.data&&!("error"===query.state.status&&!1===options.retryOnMount)}(query,options)||void 0!==query.state.data&&shouldFetchOn(query,options,options.refetchOnMount)}function shouldFetchOn(query,options,field){if(!1!==(0,utils.Eh)(options.enabled,query)&&"static"!==(0,utils.d2)(options.staleTime,query)){const value="function"==typeof field?field(query):field;return"always"===value||!1!==value&&isStale(query,options)}return!1}function shouldFetchOptionally(query,prevQuery,options,prevOptions){return(query!==prevQuery||!1===(0,utils.Eh)(prevOptions.enabled,query))&&(!options.suspense||"error"!==query.state.status)&&isStale(query,options)}function isStale(query,options){return!1!==(0,utils.Eh)(options.enabled,query)&&query.isStaleByTime((0,utils.d2)(options.staleTime,query))}var react=__webpack_require__("./node_modules/.pnpm/next@15.3.3_@babel+core@7.7.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js"),QueryClientProvider=__webpack_require__("./node_modules/.pnpm/@tanstack+react-query@5.81.5_react@19.1.0/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js");__webpack_require__("./node_modules/.pnpm/next@15.3.3_@babel+core@7.7.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/jsx-runtime.js");function createValue(){let isReset=!1;return{clearReset:()=>{isReset=!1},reset:()=>{isReset=!0},isReset:()=>isReset}}var QueryErrorResetBoundaryContext=react.createContext(createValue()),useQueryErrorResetBoundary=()=>react.useContext(QueryErrorResetBoundaryContext),ensurePreventErrorBoundaryRetry=(options,errorResetBoundary)=>{(options.suspense||options.throwOnError||options.experimental_prefetchInRender)&&(errorResetBoundary.isReset()||(options.retryOnMount=!1))},useClearResetErrorBoundary=errorResetBoundary=>{react.useEffect(()=>{errorResetBoundary.clearReset()},[errorResetBoundary])},getHasError=({result,errorResetBoundary,throwOnError,query,suspense})=>result.isError&&!errorResetBoundary.isReset()&&!result.isFetching&&query&&(suspense&&void 0===result.data||(0,utils.GU)(throwOnError,[result.error,query])),IsRestoringContext=react.createContext(!1),useIsRestoring=()=>react.useContext(IsRestoringContext),ensureSuspenseTimers=(IsRestoringContext.Provider,defaultedOptions=>{if(defaultedOptions.suspense){const clamp=value=>"static"===value?value:Math.max(value??1e3,1e3),originalStaleTime=defaultedOptions.staleTime;defaultedOptions.staleTime="function"==typeof originalStaleTime?(...args)=>clamp(originalStaleTime(...args)):clamp(originalStaleTime),"number"==typeof defaultedOptions.gcTime&&(defaultedOptions.gcTime=Math.max(defaultedOptions.gcTime,1e3))}}),willFetch=(result,isRestoring)=>result.isLoading&&result.isFetching&&!isRestoring,shouldSuspend=(defaultedOptions,result)=>defaultedOptions?.suspense&&result.isPending,fetchOptimistic=(defaultedOptions,observer,errorResetBoundary)=>observer.fetchOptimistic(defaultedOptions).catch(()=>{errorResetBoundary.clearReset()});function useQuery(options,queryClient){return function useBaseQuery(options,Observer,queryClient){const isRestoring=useIsRestoring(),errorResetBoundary=useQueryErrorResetBoundary(),client=(0,QueryClientProvider.jE)(queryClient),defaultedOptions=client.defaultQueryOptions(options);client.getDefaultOptions().queries?._experimental_beforeQuery?.(defaultedOptions),defaultedOptions._optimisticResults=isRestoring?"isRestoring":"optimistic",ensureSuspenseTimers(defaultedOptions),ensurePreventErrorBoundaryRetry(defaultedOptions,errorResetBoundary),useClearResetErrorBoundary(errorResetBoundary);const isNewCacheEntry=!client.getQueryCache().get(defaultedOptions.queryHash),[observer]=react.useState(()=>new Observer(client,defaultedOptions)),result=observer.getOptimisticResult(defaultedOptions),shouldSubscribe=!isRestoring&&!1!==options.subscribed;if(react.useSyncExternalStore(react.useCallback(onStoreChange=>{const unsubscribe=shouldSubscribe?observer.subscribe(notifyManager.jG.batchCalls(onStoreChange)):utils.lQ;return observer.updateResult(),unsubscribe},[observer,shouldSubscribe]),()=>observer.getCurrentResult(),()=>observer.getCurrentResult()),react.useEffect(()=>{observer.setOptions(defaultedOptions)},[defaultedOptions,observer]),shouldSuspend(defaultedOptions,result))throw fetchOptimistic(defaultedOptions,observer,errorResetBoundary);if(getHasError({result,errorResetBoundary,throwOnError:defaultedOptions.throwOnError,query:client.getQueryCache().get(defaultedOptions.queryHash),suspense:defaultedOptions.suspense}))throw result.error;if(client.getDefaultOptions().queries?._experimental_afterQuery?.(defaultedOptions,result),defaultedOptions.experimental_prefetchInRender&&!utils.S$&&willFetch(result,isRestoring)){const promise=isNewCacheEntry?fetchOptimistic(defaultedOptions,observer,errorResetBoundary):client.getQueryCache().get(defaultedOptions.queryHash)?.promise;promise?.catch(utils.lQ).finally(()=>{observer.updateResult()})}return defaultedOptions.notifyOnChangeProps?result:observer.trackResult(result)}(options,QueryObserver,queryClient)}}}]);