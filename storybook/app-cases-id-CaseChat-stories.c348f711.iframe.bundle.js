"use strict";(self.webpackChunkapp_scaffold=self.webpackChunkapp_scaffold||[]).push([[8141],{"./src/app/cases/[id]/CaseChat.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CaseAction:()=>CaseAction,EditAction:()=>EditAction,InvalidResponse:()=>InvalidResponse,MixedActions:()=>MixedActions,Noop:()=>Noop,PhotoNoteAction:()=>PhotoNoteAction,ResponseOnly:()=>ResponseOnly,ServerUnavailable:()=>ServerUnavailable,UnreachableServer:()=>UnreachableServer,WithLiveLlm:()=>WithLiveLlm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),openai__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/openai/index.mjs"),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_CaseChat__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/cases/[id]/CaseChat.tsx");const __WEBPACK_DEFAULT_EXPORT__={component:_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,title:"Components/CaseChat"},WithLiveLlm={render:function WithLiveLlmStory(){const[apiKey,setApiKey]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(""),[baseUrl,setBaseUrl]=(0,react__WEBPACK_IMPORTED_MODULE_2__.useState)("");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div",{className:"space-y-2 p-4",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("label",{className:"block",children:["API Key:",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input",{type:"text",value:apiKey,onChange:e=>setApiKey(e.target.value),className:"border rounded w-full p-1"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("label",{className:"block",children:["Base URL:",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("input",{type:"text",value:baseUrl,onChange:e=>setBaseUrl(e.target.value),placeholder:"https://api.openai.com/v1",className:"border rounded w-full p-1"})]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"story",onChat:async function onChat(messages){var _res_choices__message,_res_choices_;if(!apiKey)return{response:{en:""},actions:[],noop:!0,lang:"en"};const client=new openai__WEBPACK_IMPORTED_MODULE_1__.Ay({apiKey,baseURL:baseUrl||void 0,dangerouslyAllowBrowser:!0});var _res_choices__message_content;const text=null!==(_res_choices__message_content=null===(_res_choices_=(await client.chat.completions.create({model:"gpt-4o",messages,max_tokens:800})).choices[0])||void 0===_res_choices_||null===(_res_choices__message=_res_choices_.message)||void 0===_res_choices__message?void 0:_res_choices__message.content)&&void 0!==_res_choices__message_content?_res_choices__message_content:"";try{const parsed=JSON.parse(text);var _parsed_lang;return{...parsed,lang:null!==(_parsed_lang=parsed.lang)&&void 0!==_parsed_lang?_parsed_lang:"en"}}catch(e){return{response:{en:text},actions:[],noop:!1,lang:"en"}}}})]})}};function usePhotoStub(){(0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{const original=window.fetch;return window.fetch=async()=>new Response(JSON.stringify({photos:["/uploads/a.jpg"]})),()=>{window.fetch=original}},[])}const CaseAction={render:function CaseActionStory(){usePhotoStub();const reply={response:{en:"Notify the owner?"},actions:[{id:"notify-owner"}],noop:!1,lang:"en"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1",onChat:async()=>reply})}},EditAction={render:function EditActionStory(){usePhotoStub();const reply={response:{en:"Plate looks like ABC123"},actions:[{field:"plate",value:"ABC123"}],noop:!1,lang:"en"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1",onChat:async()=>reply})}},PhotoNoteAction={render:function PhotoNoteActionStory(){usePhotoStub();const reply={response:{en:"Add note to photo"},actions:[{photo:"a.jpg",note:"Clear"}],noop:!1,lang:"en"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1",onChat:async()=>reply})}},MixedActions={render:function MixedActionsStory(){usePhotoStub();const reply={response:{en:"Multiple suggestions"},actions:[{id:"compose"},{field:"state",value:"IL"},{photo:"a.jpg",note:"Zoom here"}],noop:!1,lang:"en"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1",onChat:async()=>reply})}},ResponseOnly={render:function ResponseOnlyStory(){usePhotoStub();const reply={response:{en:"Just a regular response"},actions:[],noop:!1,lang:"en"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1",onChat:async()=>reply})}},Noop={render:function NoopStory(){usePhotoStub();const reply={response:{en:""},actions:[],noop:!0,lang:"en"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1",onChat:async()=>reply})}};function useChatError(status){(0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{const original=window.fetch;return window.fetch=async input=>{const url="string"==typeof input?input:input.toString();return url.includes("/api/cases/1/chat")?new Response(JSON.stringify({error:"fail"}),{status}):url.includes("/api/cases/1")?new Response(JSON.stringify({photos:["/uploads/a.jpg"]})):original(input)},()=>{window.fetch=original}},[status])}const ServerUnavailable={render:function ServerUnavailableStory(){return useChatError(503),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1"})}},InvalidResponse={render:function InvalidResponseStory(){return useChatError(502),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1"})}},UnreachableServer={render:function UnreachableServerStory(){return function useChatNetworkFailure(){(0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{const original=window.fetch;return window.fetch=async input=>{const url="string"==typeof input?input:input.toString();if(url.includes("/api/cases/1/chat"))throw new Error("network failure");return url.includes("/api/cases/1")?new Response(JSON.stringify({photos:["/uploads/a.jpg"]})):original(input)},()=>{window.fetch=original}},[])}(),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_CaseChat__WEBPACK_IMPORTED_MODULE_3__.A,{caseId:"1"})}},__namedExportsOrder=["WithLiveLlm","CaseAction","EditAction","PhotoNoteAction","MixedActions","ResponseOnly","Noop","ServerUnavailable","InvalidResponse","UnreachableServer"];WithLiveLlm.parameters={...WithLiveLlm.parameters,docs:{...WithLiveLlm.parameters?.docs,source:{originalSource:'{\n  render: function WithLiveLlmStory() {\n    const [apiKey, setApiKey] = useState("");\n    const [baseUrl, setBaseUrl] = useState("");\n    async function onChat(messages: Array<{\n      role: "user" | "assistant";\n      content: string;\n    }>): Promise<CaseChatReply> {\n      if (!apiKey) return {\n        response: {\n          en: ""\n        },\n        actions: [],\n        noop: true,\n        lang: "en"\n      };\n      const client = new OpenAI({\n        apiKey,\n        baseURL: baseUrl || undefined,\n        dangerouslyAllowBrowser: true\n      });\n      const res = await client.chat.completions.create({\n        model: "gpt-4o",\n        messages,\n        max_tokens: 800\n      });\n      const text = res.choices[0]?.message?.content ?? "";\n      try {\n        const parsed = JSON.parse(text) as CaseChatReply;\n        return {\n          ...parsed,\n          lang: parsed.lang ?? "en"\n        };\n      } catch {\n        return {\n          response: {\n            en: text\n          },\n          actions: [],\n          noop: false,\n          lang: "en"\n        };\n      }\n    }\n    return <div className="space-y-2 p-4">\n        <label className="block">\n          API Key:\n          <input type="text" value={apiKey} onChange={e => setApiKey(e.target.value)} className="border rounded w-full p-1" />\n        </label>\n        <label className="block">\n          Base URL:\n          <input type="text" value={baseUrl} onChange={e => setBaseUrl(e.target.value)} placeholder="https://api.openai.com/v1" className="border rounded w-full p-1" />\n        </label>\n        <CaseChat caseId="story" onChat={onChat} />\n      </div>;\n  }\n}',...WithLiveLlm.parameters?.docs?.source}}},CaseAction.parameters={...CaseAction.parameters,docs:{...CaseAction.parameters?.docs,source:{originalSource:'{\n  render: function CaseActionStory() {\n    usePhotoStub();\n    const reply: CaseChatReply = {\n      response: {\n        en: "Notify the owner?"\n      },\n      actions: [{\n        id: "notify-owner"\n      }],\n      noop: false,\n      lang: "en"\n    };\n    return <CaseChat caseId="1" onChat={async () => reply} />;\n  }\n}',...CaseAction.parameters?.docs?.source}}},EditAction.parameters={...EditAction.parameters,docs:{...EditAction.parameters?.docs,source:{originalSource:'{\n  render: function EditActionStory() {\n    usePhotoStub();\n    const reply: CaseChatReply = {\n      response: {\n        en: "Plate looks like ABC123"\n      },\n      actions: [{\n        field: "plate",\n        value: "ABC123"\n      }],\n      noop: false,\n      lang: "en"\n    };\n    return <CaseChat caseId="1" onChat={async () => reply} />;\n  }\n}',...EditAction.parameters?.docs?.source}}},PhotoNoteAction.parameters={...PhotoNoteAction.parameters,docs:{...PhotoNoteAction.parameters?.docs,source:{originalSource:'{\n  render: function PhotoNoteActionStory() {\n    usePhotoStub();\n    const reply: CaseChatReply = {\n      response: {\n        en: "Add note to photo"\n      },\n      actions: [{\n        photo: "a.jpg",\n        note: "Clear"\n      }],\n      noop: false,\n      lang: "en"\n    };\n    return <CaseChat caseId="1" onChat={async () => reply} />;\n  }\n}',...PhotoNoteAction.parameters?.docs?.source}}},MixedActions.parameters={...MixedActions.parameters,docs:{...MixedActions.parameters?.docs,source:{originalSource:'{\n  render: function MixedActionsStory() {\n    usePhotoStub();\n    const reply: CaseChatReply = {\n      response: {\n        en: "Multiple suggestions"\n      },\n      actions: [{\n        id: "compose"\n      }, {\n        field: "state",\n        value: "IL"\n      }, {\n        photo: "a.jpg",\n        note: "Zoom here"\n      }],\n      noop: false,\n      lang: "en"\n    };\n    return <CaseChat caseId="1" onChat={async () => reply} />;\n  }\n}',...MixedActions.parameters?.docs?.source}}},ResponseOnly.parameters={...ResponseOnly.parameters,docs:{...ResponseOnly.parameters?.docs,source:{originalSource:'{\n  render: function ResponseOnlyStory() {\n    usePhotoStub();\n    const reply: CaseChatReply = {\n      response: {\n        en: "Just a regular response"\n      },\n      actions: [],\n      noop: false,\n      lang: "en"\n    };\n    return <CaseChat caseId="1" onChat={async () => reply} />;\n  }\n}',...ResponseOnly.parameters?.docs?.source}}},Noop.parameters={...Noop.parameters,docs:{...Noop.parameters?.docs,source:{originalSource:'{\n  render: function NoopStory() {\n    usePhotoStub();\n    const reply: CaseChatReply = {\n      response: {\n        en: ""\n      },\n      actions: [],\n      noop: true,\n      lang: "en"\n    };\n    return <CaseChat caseId="1" onChat={async () => reply} />;\n  }\n}',...Noop.parameters?.docs?.source}}},ServerUnavailable.parameters={...ServerUnavailable.parameters,docs:{...ServerUnavailable.parameters?.docs,source:{originalSource:'{\n  render: function ServerUnavailableStory() {\n    useChatError(503);\n    return <CaseChat caseId="1" />;\n  }\n}',...ServerUnavailable.parameters?.docs?.source}}},InvalidResponse.parameters={...InvalidResponse.parameters,docs:{...InvalidResponse.parameters?.docs,source:{originalSource:'{\n  render: function InvalidResponseStory() {\n    useChatError(502);\n    return <CaseChat caseId="1" />;\n  }\n}',...InvalidResponse.parameters?.docs?.source}}},UnreachableServer.parameters={...UnreachableServer.parameters,docs:{...UnreachableServer.parameters?.docs,source:{originalSource:'{\n  render: function UnreachableServerStory() {\n    useChatNetworkFailure();\n    return <CaseChat caseId="1" />;\n  }\n}',...UnreachableServer.parameters?.docs?.source}}}}}]);