// Generated by ts-to-zod
import { z } from "zod";

export const ownershipRequestInfoSchema = z.object({
  plate: z.string(),
  state: z.string(),
  vin: z.string().optional().nullable(),
  ownerName: z.string().optional().nullable(),
  address1: z.string().optional().nullable(),
  address2: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  postalCode: z.string().optional().nullable(),
  driversLicense: z.string().optional().nullable(),
  requesterName: z.string().optional().nullable(),
  requesterBusinessName: z.string().optional().nullable(),
  requesterAddress: z.string().optional().nullable(),
  requesterCityStateZip: z.string().optional().nullable(),
  requesterDaytimePhoneNumber: z.string().optional().nullable(),
  requesterDriverLicenseNumber: z.string().optional().nullable(),
  requesterDriverLicenseState: z.string().optional().nullable(),
  requesterEmailAddress: z.string().optional().nullable(),
  requesterPhoneNumber: z.string().optional().nullable(),
  vehicleYear: z.string().optional().nullable(),
  vehicleMake: z.string().optional().nullable(),
  titleNumber: z.string().optional().nullable(),
  plateYear: z.string().optional().nullable(),
  reasonForRequestingRecords: z.string().optional().nullable(),
  plateCategoryOther: z.string().optional().nullable(),
  requesterPositionInOrginization: z.string().optional().nullable(),
  requesterProfessionalLicenseOrARDCNumber: z.string().optional().nullable(),
  titleSearch: z.boolean().optional(),
  registrationSearch: z.boolean().optional(),
  certifiedTitleSearch: z.boolean().optional(),
  certifiedRegistrationSearch: z.boolean().optional(),
  microfilmWithSearchOption: z.boolean().optional(),
  microfilmOnly: z.boolean().optional(),
  passenger: z.boolean().optional(),
  bTruck: z.boolean().optional(),
  plateCategoryOtherCheck: z.boolean().optional(),
  reasonA: z.boolean().optional(),
  reasonB: z.boolean().optional(),
  reasonC: z.boolean().optional(),
  reasonD: z.boolean().optional(),
  reasonE: z.boolean().optional(),
  reasonF: z.boolean().optional(),
  reasonG: z.boolean().optional(),
  reasonH: z.boolean().optional(),
  reasonI: z.boolean().optional(),
  reasonJ: z.boolean().optional(),
  reasonK: z.boolean().optional(),
  reasonL: z.boolean().optional(),
  reasonM: z.boolean().optional(),
  reasonN: z.boolean().optional(),
  reasonO: z.boolean().optional(),
});

export const ownershipModuleSchema = z.object({
  id: z.string(),
  state: z.string(),
  address: z.string(),
  fee: z.number(),
  requiresCheck: z.boolean(),
  requestVin: z
    .function()
    .args(ownershipRequestInfoSchema)
    .returns(z.promise(z.void()))
    .optional(),
  requestContactInfo: z
    .function()
    .args(ownershipRequestInfoSchema)
    .returns(z.promise(z.void()))
    .optional(),
  generateForms: z
    .function()
    .args(ownershipRequestInfoSchema)
    .returns(z.promise(z.union([z.string(), z.array(z.string())])))
    .optional(),
});

export const ownershipModuleStatusSchema = z.object({
  id: z.string(),
  state: z.string(),
  enabled: z.boolean(),
  failureCount: z.number(),
});
