import { authOptions } from "@/lib/authOptions";
import { config } from "@/lib/config";
import type { Metadata, Viewport } from "next";
import { getServerSession } from "next-auth";
import { cookies, headers } from "next/headers";
import { initI18n } from "../i18n";
import AuthProvider from "./auth-provider";
import NavBar from "./components/NavBar";
import NotificationProvider from "./components/NotificationProvider";
import I18nProvider from "./i18n-provider";
import QueryProvider from "./query-provider";
import "./globals.css";

export const runtime = "nodejs";

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
};

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await getServerSession(authOptions);
  const cookieStore = await cookies();
  // Prefer the language cookie but fall back to Accept-Language
  let storedLang = cookieStore.get("language")?.value;
  if (!storedLang) {
    const headerList = await headers();
    const accept = headerList.get("accept-language") ?? "";
    // Parse the first supported locale from the Accept-Language header
    const supported = ["en", "es", "fr"];
    for (const part of accept.split(",")) {
      const code = part.split(";")[0].trim().toLowerCase().split("-")[0];
      if (supported.includes(code)) {
        storedLang = code;
        break;
      }
    }
    storedLang = storedLang ?? "en";
  }
  await initI18n(storedLang);
  const publicEnv = {
    NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: config.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,
    NEXT_PUBLIC_BASE_PATH: config.NEXT_PUBLIC_BASE_PATH,
    NEXT_PUBLIC_BROWSER_DEBUG: config.NEXT_PUBLIC_BROWSER_DEBUG,
  };
  return (
    <html lang={storedLang} translate="no">
      <body className="antialiased">
        <script
          id="public-env"
          // biome-ignore lint/security/noDangerouslySetInnerHtml: injecting runtime config
          dangerouslySetInnerHTML={{
            __html: `window.PUBLIC_ENV=${JSON.stringify(publicEnv)};`,
          }}
        />
        <QueryProvider>
          <I18nProvider lang={storedLang}>
            <NotificationProvider>
              <AuthProvider session={session}>
                <NavBar />
                {children}
              </AuthProvider>
            </NotificationProvider>
          </I18nProvider>
        </QueryProvider>
      </body>
    </html>
  );
}
