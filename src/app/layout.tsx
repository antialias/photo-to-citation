import { authOptions } from "@/lib/authOptions";
import { config } from "@/lib/config";
import type { Metadata, Viewport } from "next";
import { getServerSession } from "next-auth";
import { cookies, headers } from "next/headers";
import AuthProvider from "./auth-provider";
import NavBar from "./components/NavBar";
import NotificationProvider from "./components/NotificationProvider";
import I18nProvider from "./i18n-provider";
import QueryProvider from "./query-provider";
import { LanguageContext, SessionContext } from "./server-context";
import { UnleashProvider } from "./unleash-provider";
import "./globals.css";
import "./panda.css";

export const runtime = "nodejs";

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
};

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await getServerSession(authOptions);
  const cookieStore = await cookies();
  // Prefer the user's profile language, then cookie, then Accept-Language
  let storedLang =
    session?.user?.language || cookieStore.get("language")?.value;
  if (!storedLang) {
    const headerList = await headers();
    const accept = headerList.get("accept-language") ?? "";
    // Parse the first supported locale from the Accept-Language header
    const supported = ["en", "es", "fr"];
    for (const part of accept.split(",")) {
      const code = part.split(";")[0].trim().toLowerCase().split("-")[0];
      if (supported.includes(code)) {
        storedLang = code;
        break;
      }
    }
    storedLang = storedLang ?? "en";
  }
  const publicEnv = {
    NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: config.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,
    NEXT_PUBLIC_BASE_PATH: config.NEXT_PUBLIC_BASE_PATH,
    NEXT_PUBLIC_BROWSER_DEBUG: config.NEXT_PUBLIC_BROWSER_DEBUG,
    NEXT_PUBLIC_APP_VERSION: config.NEXT_PUBLIC_APP_VERSION,
    NEXT_PUBLIC_APP_COMMIT: config.NEXT_PUBLIC_APP_COMMIT,
    NEXT_PUBLIC_DEPLOY_TIME: config.NEXT_PUBLIC_DEPLOY_TIME,
  };
  return (
    <html lang={storedLang} translate="no">
      <body className="antialiased">
        <script
          id="public-env"
          // biome-ignore lint/security/noDangerouslySetInnerHtml: injecting runtime config
          dangerouslySetInnerHTML={{
            __html: `window.PUBLIC_ENV=${JSON.stringify(publicEnv)};`,
          }}
        />
        <SessionContext.Provider value={session}>
          <LanguageContext.Provider value={storedLang}>
            <QueryProvider>
              <UnleashProvider>
                <I18nProvider lang={storedLang}>
                  <NotificationProvider>
                    <AuthProvider session={session}>
                      <NavBar />
                      {children}
                    </AuthProvider>
                  </NotificationProvider>
                </I18nProvider>
              </UnleashProvider>
            </QueryProvider>
          </LanguageContext.Provider>
        </SessionContext.Provider>
      </body>
    </html>
  );
}
